// app/src/main/java/com/example/chessanalysis/ui/components/EvalBar.kt
package com.github.movesense.ui.components

import android.util.Log
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.FastOutSlowInEasing
import androidx.compose.animation.core.tween
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import com.github.movesense.PositionEval
import kotlin.math.abs

private const val TAG = "EvalBar"

@Composable
fun EvalBar(
    positions: List<PositionEval>,
    currentPlyIndex: Int,
    isWhiteBottom: Boolean,
    modifier: Modifier = Modifier
) {
    // –ö–†–ò–¢–ò–ß–ù–û: –°—Ç–∞–±–∏–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –º–∏–≥–∞–Ω–∏–π
    val evaluation = remember(positions, currentPlyIndex) {
        val pos = positions.getOrNull(currentPlyIndex)
        val line = pos?.lines?.firstOrNull()

        val eval = when {
            line?.cp != null -> {
                val cpValue = line.cp / 100.0f
                Log.d(TAG, "üìä Vertical eval bar: ply=$currentPlyIndex, cp=${line.cp}, eval=$cpValue")
                cpValue
            }
            line?.mate != null -> {
                val mateValue = if (line.mate > 0) 30.0f else -30.0f
                Log.d(TAG, "üìä Vertical eval bar: ply=$currentPlyIndex, mate=${line.mate}, eval=$mateValue")
                mateValue
            }
            else -> {
                Log.d(TAG, "‚ö†Ô∏è Vertical eval bar: ply=$currentPlyIndex, no evaluation available")
                0.0f
            }
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        eval
    }

    val cap = 8.0f
    val clamped = evaluation.coerceIn(-cap, cap)
    val t = (clamped + cap) / (2 * cap) // 0..1, –≥–¥–µ 0 = –ª—É—á—à–µ —É —á—ë—Ä–Ω—ã—Ö, 1 = –ª—É—á—à–µ —É –±–µ–ª—ã—Ö

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ä–µ–∑–∫–∏—Ö —Å–∫–∞—á–∫–æ–≤
    val animT = remember { Animatable(t.coerceIn(0.001f, 0.999f)) }
    LaunchedEffect(t) {
        val targetT = t.coerceIn(0.001f, 0.999f)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–æ–ª—å—à–æ–π —Å–∫–∞—á–æ–∫
        val currentValue = animT.value
        val diff = abs(targetT - currentValue)

        if (diff > 0.5f) {
            // –ë–æ–ª—å—à–æ–π —Å–∫–∞—á–æ–∫ - –±—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
            animT.animateTo(targetT, tween(200, easing = FastOutSlowInEasing))
        } else {
            // –û–±—ã—á–Ω–∞—è –ø–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
            animT.animateTo(targetT, tween(350, easing = FastOutSlowInEasing))
        }
    }

    Box(modifier = modifier) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –¥–æ—Å–∫–∏
        if (isWhiteBottom) {
            // –ë–µ–ª—ã–µ –≤–Ω–∏–∑—É: –±–µ–ª–∞—è —á–∞—Å—Ç—å –≤–Ω–∏–∑—É —Ä–∞—Å—Ç–µ—Ç –ø—Ä–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ –±–µ–ª—ã—Ö
            Box(
                Modifier
                    .fillMaxWidth()
                    .fillMaxHeight(fraction = 1f - animT.value)
                    .background(Color.Black)
                    .align(Alignment.TopStart)
            )
            Box(
                Modifier
                    .fillMaxWidth()
                    .fillMaxHeight(fraction = animT.value)
                    .background(Color.White)
                    .align(Alignment.BottomStart)
            )
        } else {
            // –ß–µ—Ä–Ω—ã–µ –≤–Ω–∏–∑—É: —á–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å –≤–Ω–∏–∑—É —Ä–∞—Å—Ç–µ—Ç –ø—Ä–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ —á–µ—Ä–Ω—ã—Ö
            Box(
                Modifier
                    .fillMaxWidth()
                    .fillMaxHeight(fraction = animT.value)
                    .background(Color.White)
                    .align(Alignment.TopStart)
            )
            Box(
                Modifier
                    .fillMaxWidth()
                    .fillMaxHeight(fraction = 1f - animT.value)
                    .background(Color.Black)
                    .align(Alignment.BottomStart)
            )
        }
    }
}